#!/bin/sh

# Version: 6.0.0 2020-05-09

WWW_BUILD=0009

#========================================================================================
# Setup debug logging
#----------------------------------------------------------------------------------------
DEBUGLOG="/var/log/pcp_debug.log"

pcp_debug_log() {
	[ $DEBUG -ne 0 ] && echo $1 | sudo tee -a $DEBUGLOG > /dev/null
}

#========================================================================================
# Debug variables listing
#----------------------------------------------------------------------------------------
pcp_debug_variables() {
	if [ $DEBUG -eq 1 ]; then
		# FORMAT - colour|text|html
		local FORMAT=$1
		shift

		for VAR in $@
		do
			MESSAGE='$'$VAR': '$(eval echo \$${VAR})
			pcp_message DEBUG "$MESSAGE" "$FORMAT"
		done
	fi
}

#========================================================================================
# Table padding
#----------------------------------------------------------------------------------------
pcp_table_padding() {
	[ x"$1" = x"" ] && COLSPAN="" || COLSPAN=' colspan="'$1'"'
	pcp_toggle_row_shade
	echo '            <tr class="'$ROWSHADE'">'
	echo '              <td'$COLSPAN'>'
	echo '              </td>'
	echo '            </tr>'
}

#========================================================================================
# System wide variables
#----------------------------------------------------------------------------------------
pcp_config_file() {
	PCPCFG="/usr/local/etc/pcp/pcp.cfg"
	# Old habbits might die hard.
	CONFIGCFG=$PCPCFG
}

pcp_variables() {
	pcp_debug_log "$0 - Setting pcp_variables..."
	#====================================================================================
	# The following are standard piCorePlayer variables, do NOT edit!
	# Note: This section is ONLY for variables as it can be run multiple times.
	#------------------------------------------------------------------------------------
	# Name of device that has tce.  Assume boot is partition 1 of that device.
	TMPDEV="$(readlink /etc/sysconfig/tcedir | cut -d '/' -f3)"
	TCEDEV="/dev/$TMPDEV"
	TCEMNT="/mnt/$TMPDEV"
	BOOTDEV=${TCEDEV%%?}1
	BOOTMNT=${TCEMNT%%?}1
	CONFIGTXT="$BOOTMNT/config.txt"
	CMDLINETXT="$BOOTMNT/cmdline.txt"
	BOOTLOCAL="/opt/bootlocal.sh"
	BOOTSYNC="/opt/bootsync.sh"
	SHUTDOWN="/opt/shutdown.sh"
	PB100="/home/tc/.local/bin/.pbtemp"
	HTTPD_CONF="/etc/httpd.conf"
	HTTPD="/usr/sbin/httpd"
	ASOUNDCONF="/etc/asound.conf"
	ONBOOTLST="/etc/sysconfig/tcedir/onboot.lst"
	VOLUME="$BOOTMNT"
	DEVICE="$BOOTDEV"
	UPD_PCP="/tmp/upd_picoreplayer"
	PCPHOME="$WWWROOT/cgi-bin"
	LOGDIR="/var/log"
	PACKAGEDIR="/etc/sysconfig/tcedir/optional"
	PCPVERSIONCFG="/usr/local/etc/pcp/pcpversion.cfg"
	SAMBACONF="/usr/local/etc/samba/smb.conf"
	USBMOUNTCONF="/usr/local/etc/pcp/usbmounts.conf"
	NETMOUNTCONF="/usr/local/etc/pcp/netmounts.conf"
	REBOOT_PENDING="/tmp/rebootpending"
	BASE_DIR="cgi-bin"
	WPASUPPLICANTCONF="/usr/local/etc/pcp/wpa_supplicant.conf"
	FILETOOLLST="/opt/.filetool.lst"
	URL_DECODE="$HTTPD -i -d"

	#------------------------------------------------------------------------------------
	# Define modes
	#------------------------------------------------------------------------------------
	MODE_PLAYER=10
	MODE_SERVER=30
	MODE_BETA=40				# Beta options that can be shared with beta testers
	MODE_DEVELOPER=100			# Experiential options for developers only

	#------------------------------------------------------------------------------------
	# Define repositories
	#------------------------------------------------------------------------------------
	PCP_REPO_1="https://repo.picoreplayer.org/repo"
	PCP_REPO_2="http://picoreplayer.sourceforge.net/tcz_repo"
	[ $PCP_CUR_REPO -eq 1 ] && PCP_REPO="$PCP_REPO_1" || PCP_REPO="$PCP_REPO_2"
	PICORE_REPO_1="http://repo.tinycorelinux.net/"
	PICORE_REPO_2="http://distro.ibiblio.org/tinycore/"

	[ $PCP_CUR_REPO -eq 1 ] && INSITU_DOWNLOAD="https://repo.picoreplayer.org/insitu" || INSITU_DOWNLOAD="http://picoreplayer.sourceforge.net/insitu"

	# Use beta/test download area
	if [ $TEST -eq 3 ]; then
		[ $PCP_CUR_REPO -eq 1 ] && INSITU_DOWNLOAD="https://repo.picoreplayer.org/beta" || INSITU_DOWNLOAD="http://picoreplayer.sourceforge.net/beta"
		[ $PCP_CUR_REPO -eq 1 ] && PCP_REPO="https://repo.picoreplayer.org/beta" || PCP_REPO="http://picoreplayer.sourceforge.net/beta"
	fi

	#------------------------------------------------------------------------------------
	# Set Squeezelite variable to binary location.
	#------------------------------------------------------------------------------------
	[ -f /etc/sysconfig/tcedir/squeezelite ] && SQLT_BIN=/etc/sysconfig/tcedir/squeezelite || SQLT_BIN=/usr/local/bin/squeezelite
}

pcp_config_file
. $PCPCFG
pcp_debug_log "$0 - Running pcp-functions..."
pcp_variables

#========================================================================================
# ANSI colours
#----------------------------------------------------------------------------------------
pcp_set_coloured_text() {
	CRE="$(echo -e '\r\033[K')"
	RED="$(echo -e '\033[1;31m')"
	GREEN="$(echo -e '\033[1;32m')"
	YELLOW="$(echo -e '\033[1;33m')"
	BLUE="$(echo -e '\033[1;34m')"
	MAGENTA="$(echo -e '\033[1;35m')"
	CYAN="$(echo -e '\033[1;36m')"
	WHITE="$(echo -e '\033[1;37m')"
	NORMAL="$(echo -e '\033[0;39m')"
}
pcp_set_coloured_text

pcp_unset_coloured_text() {
	CRE=""
	RED=""
	GREEN=""
	YELLOW=""
	BLUE=""
	MAGENTA=""
	CYAN=""
	WHITE=""
	NORMAL=""
}

#========================================================================================
# Function to read config file.
#----------------------------------------------------------------------------------------
pcp_read_config() {
	pcp_debug_log "$0 - Reading pCP pcp.cfg..."
	. $PCPCFG
}

#========================================================================================
# Messages.
#----------------------------------------------------------------------------------------
pcp_message() {
	local TYPE=$1
	local MESSAGE=$2
#	FORMAT: colour|text|html
	local FORMAT=$3

	[ "$4" = "-n" ] && local SLASHP="" || local SLASHP="</p>"

	case $TYPE in
		OK|ok)
			case $FORMAT in
				col*|COL*) echo $4 "${GREEN}${MESSAGE}${NORMAL}" ;;
				text|TEXT) echo $4 '[ OK ] '${MESSAGE} ;;
				html|HTML) echo '<p class="ok">[ OK ] '${MESSAGE}${SLASHP} ;;
			esac
		;;
		INFO|info)
			case $FORMAT in
				col*|COL*) echo $4 "${YELLOW}${MESSAGE}${NORMAL}" ;;
				text|TEXT) echo $4 '[ INFO ] '${MESSAGE} ;;
				html|HTML) echo '<p class="info">[ INFO ] '${MESSAGE}${SLASHP} ;;
			esac
		;;
		ERROR|error)
			case $FORMAT in
				col*|COL*) echo $4 "${RED}${MESSAGE}${NORMAL}" ;;
				text|TEXT) echo $4 '[ ERROR ] '${MESSAGE} ;;
				html|HTML) echo '<p class="error">[ ERROR ] '${MESSAGE}${SLASHP} ;;
			esac
		;;
		DEBUG|debug)
			case $FORMAT in
				col*|COL*) echo $4 "${ORANGE}${MESSAGE}${NORMAL}" ;;
				text|TEXT) echo $4 '[ DEBUG ] '${MESSAGE} ;;
				html|HTML) echo '<p class="debug">[ DEBUG ] '${MESSAGE}${SLASHP} ;;
			esac
		;;
		WARN|warn)
			case $FORMAT in
				col*|COL*) echo $4 "${ORANGE}${MESSAGE}${NORMAL}" ;;
				text|TEXT) echo $4 '[ WARN ] '${MESSAGE} ;;
				html|HTML) echo '<p class="debug">[ WARN ] '${MESSAGE}${SLASHP} ;;
			esac
		;;
	esac
}

#========================================================================================
# Function to read title, description and version (if defined).
#----------------------------------------------------------------------------------------
pcp_get_page_info() {
	BASENAME=$(basename $1)
	VERSION=$(cat $BASENAME | grep -m 1 "^# Version: " | sed "s/^# Version: //")
	TITLE=$(cat $BASENAME | grep -m 1 "^# Title: " | sed "s/^# Title: //")
	DESCR=$(cat $BASENAME | grep -m 1 "^# Description: " | sed "s/^# Description: //")
}

#========================================================================================
# UTF-8 Dingbats and other symbols
#
# References:
#  - http://nealchester.com/special-characters/#crosses
#  - http://www.w3schools.com/charsets/ref_utf_dingbats.asp
#----------------------------------------------------------------------------------------
# Used on LMS controls
BLACKTRIANGLE="&#9650;"
BLACKTRIANGLEDOWN="&#9660;"
BLACKTRIANGLELEFT="&#9668;"
BLACKTRIANGLERIGHT="&#9658;"
DEGREE_SIGN="&deg;"
EXTERNALLINK="&#8599;"
FILLEDSAMLLSQUARE="&#9724;"

# Tick and cross
HEAVY_CHECK_MARK="&#10004;"
HEAVY_BALLOT_X="&#10008;"

pcp_green_tick() {
	INDICATOR=$HEAVY_CHECK_MARK
	CLASS="indicator_green"
	STATUS="$1"
}

pcp_red_cross() {
	INDICATOR=$HEAVY_BALLOT_X
	CLASS="indicator_red"
	STATUS="$1"
}

#========================================================================================
# Free space on tce mount device  default:/mnt/mmcblk0p2
#  - k = kilobytes free
#  - m = megabytes free
#  - p = percentage free
#----------------------------------------------------------------------------------------
pcp_free_space() {
	case "$1" in
		k) set -- $(/bin/busybox df -k | grep $TCEDEV); echo $4 ;;
		m) set -- $(/bin/busybox df -m | grep $TCEDEV); echo $4 ;;
		p) set -- $(/bin/busybox df -h | grep $TCEDEV); echo $5 | sed 's/%//' ;;
		*) set -- $(/bin/busybox df -h | grep $TCEDEV); echo $4 ;;
	esac
}

pcp_sufficient_free_space() {
	local SPACE=$(pcp_free_space k)
	local REQUIRED=$1

	if [ $# -gt 1 ]; then
		# FORMAT: html|text|colour
		local FORMAT=$1
		local REQUIRED=$2
		[ "$FORMAT" = "nohtml" ] && local FORMAT="text" # <== GE nohtml depreciated
	fi
	[ x"$FORMAT" = x"" ] && local FORMAT="html"


	if [ $DEBUG -eq 1 ]; then
		pcp_message DEBUG "Free space: ${SPACE}k" "$FORMAT"
		pcp_message DEBUG "Required space: ${REQUIRED}k" "$FORMAT"
	fi

	if [ $REQUIRED -lt $SPACE ]; then
		[ $DEBUG -eq 1 ] && pcp_message OK "Enough space." "$FORMAT"
		return 0
	else
		pcp_message ERROR "Not enough space." "$FORMAT"
		pcp_message INFO "Try expanding your partition." "$FORMAT"
		if [ "$FORMAT" = "html" ]; then
			STRING1='Not enough space. Press [OK] to start expanding your partition or [Cancel] to abort.'
			SCRIPT1="xtras_resize.cgi"
			pcp_confirmation_required
			pcp_go_back_button
		fi
		return 1
	fi
}

#========================================================================================
# Row shading and help ID numbering.
#----------------------------------------------------------------------------------------
pcp_start_row_shade() {
	SHADE=0
	ROWSHADE="even"
}

pcp_toggle_row_shade() {
	if [ $SHADE -eq 1 ]; then
		SHADE=0
		ROWSHADE="even"
	else
		SHADE=1
		ROWSHADE="odd"
	fi
}

pcp_incr_id() {
	ID=$((ID+1))
}

#========================================================================================
# Check an extension installed.
#----------------------------------------------------------------------------------------
pcp_extn_is_installed() {
	tce-status -i | grep $1 >/dev/null 2>&1
	echo $?
}

#========================================================================================
# Test if the Internet, DNS or repositories are accessible.
#----------------------------------------------------------------------------------------
pcp_internet_accessible() {
	[ x"" = x"$INTERNET_CHECK_IP" ] && INTERNET_CHECK_IP="8.8.8.8"
	ping -w5 -c3 $INTERNET_CHECK_IP >/dev/null 2>&1
	echo $?
}

pcp_dns_accessible() (
	ping -w5 -c3 google.com >/dev/null 2>&1
	echo $?
)

pcp_picore_accessible() {
	/bin/busybox wget --spider $MIRROR >/dev/null 2>&1
	echo $?
}

pcp_pcp_repo_accessible() {	# GE depreciated ???
	/bin/busybox wget --spider ${PCP_REPO}/repo.htm >/dev/null 2>&1
	echo $?
}

pcp_pcp_repo_1_accessible() {
	/bin/busybox wget --spider ${PCP_REPO_1}/repo.htm >/dev/null 2>&1
	echo $?
}

pcp_pcp_repo_2_accessible() {
	/bin/busybox wget --spider ${PCP_REPO_2}/repo.htm >/dev/null 2>&1
	echo $?
}

pcp_picore_repo_1_accessible() {
	/bin/busybox wget --spider $PICORE_REPO_1 >/dev/null 2>&1
	echo $?
}

pcp_picore_repo_2_accessible() {
	/bin/busybox wget --spider $PICORE_REPO_2 >/dev/null 2>&1
	echo $?
}

#========================================================================================
# Generate a header for log report.
#----------------------------------------------------------------------------------------
pcp_log_header() {
	LOG="${LOGDIR}/pcp_${1%.*}.log"
	echo "Generated by $(echo $0) on $(date)" > $LOG
	cat /etc/motd >> $LOG
	echo >> $LOG
}

#========================================================================================
# Reset repository to piCore default value.
#----------------------------------------------------------------------------------------
pcp_reset_repository() {
	echo "${PCP_REPO_1%/}/" > /opt/tcemirror
	PCP_CUR_REPO=1
}

#========================================================================================
# cmdline.txt functions
#----------------------------------------------------------------------------------------
pcp_backup_cmdlinetxt() {
	cp ${CMDLINETXT} ${CMDLINETXT}.bak
}

pcp_restore_cmdlinetxt() {
	[ -f ${CMDLINETXT}.bak ] && cp ${CMDLINETXT}.bak ${CMDLINETXT}
}

pcp_clean_cmdlinetxt() {
	# Remove carriage returns, add a space to end of file, then remove multiple spaces.
	cat $CMDLINETXT | tr -d "\n" > /tmp/cmdline.txt
	cp /tmp/cmdline.txt $CMDLINETXT
	sed -i '$s/$/ /' $CMDLINETXT
	sed -i 's/ \{1,\}/ /g' $CMDLINETXT
}

pcp_bootcode_add() {
	REBOOT_REQUIRED=TRUE
	pcp_clean_cmdlinetxt
	sed -i 's/'${1}'[ ]*//g' $CMDLINETXT
	[ $2 -eq 1 ] && sed -i '1 s/^/'${1}' /' $CMDLINETXT
}

pcp_bootcode_equal_add() {
	REBOOT_REQUIRED=TRUE
	pcp_clean_cmdlinetxt
	STR="$1=$2"
	sed -i 's/'${VARIABLE}'[=][^ ]* //g' $CMDLINETXT
	[ x"" != x"$2" ] && sed -i '1 s/^/'${STR}' /' $CMDLINETXT
}

pcp_bootcode_equal_add2() {
	REBOOT_REQUIRED=TRUE
	pcp_clean_cmdlinetxt
	sed -i 's/'${VARIABLE}'[=][^ ]* //g' $CMDLINETXT
	VALUES=$(echo $2 | awk '{ for (i=NF; i>1; i--) printf("%s ",$i); print $1; }')
	for S in $VALUES; do
		STR="$1=$S"
		[ x"" != x"$2" ] && sed -i '1 s/^/'${STR}' /' $CMDLINETXT
	done
}
#========================================================================================
# Update the Timezone function
#
# Called from:
#			timezone.cgi
#			pcp_startup.sh
#----------------------------------------------------------------------------------------
pcp_set_timezone() {
	. $PCPCFG
	pcp_timezone
}

pcp_timezone() {
	# Remove old timezone settings
	sudo sed -i 's/\(tz=\)\S*[ ]\+//g' $CMDLINETXT
	sudo rm -f /etc/sysconfig/timezone
	# Add new TIMEZONE settings if used
	if [ x"" != x"$TIMEZONE" ]; then
		sed -i '1 s@^@tz='$TIMEZONE' @' $CMDLINETXT
		sudo echo "TZ=$TIMEZONE" > /etc/sysconfig/timezone
		export TZ=$TIMEZONE
	fi
	pcp_clean_cmdlinetxt
}

#========================================================================================
# The MAC addresses used by this piCorePlayer can be:
#	1. An arbitrarily assigned MAC address via Squeezelite software (in pcp.cfg)
#	2. The MAC address of the wireless card (if installed)
#	3. The physical MAC address of ethernet card (Raspberry Pi)
#		PLAYER_MAC=${MAC_ADDRESS:-$(pcp_eth0_mac_address)}
#----------------------------------------------------------------------------------------
pcp_config_mac_address() {
	echo $MAC_ADDRESS
}

pcp_mac_address() {
	local INTERFACE="$1"
	cat /sys/class/net/${INTERFACE}/address
}

pcp_wlan0_mac_address() {	# <== GE depreciated
	pcp_mac_address "wlan0"
}

pcp_eth0_mac_address() {	# <== GE depreciated
	pcp_mac_address "eth0"
}

pcp_controls_mac_address() {
	ifconfig eth0 2>&1 | grep inet >/dev/null 2>&1
	local eth0_IP=$?
	ifconfig wlan0 2>&1 | grep inet >/dev/null 2>&1
	local wlan0_IP=$?
	local PLAYER_MAC=$(pcp_eth0_mac_address)
	if [ "$WIFI" = "on" ]; then
		if [ $wlan0_IP -eq 0 ]; then
			local PLAYER_MAC=$(pcp_wlan0_mac_address)
		fi
		if [ $eth0_IP -eq 0 ]; then
			local PLAYER_MAC=$(pcp_eth0_mac_address)
		fi
	fi
	if [ $(pcp_config_mac_address) ]; then
		local PLAYER_MAC=$(pcp_config_mac_address)
	fi
	echo $PLAYER_MAC
}

#========================================================================================
# Banner, navigation, footer and controls html
#----------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------
# $1 = title, $2 = author, $3 = seconds, $4 = url, $5 = "nobody" tag
#----------------------------------------------------------------------------------------
pcp_html_head() {
	echo 'Content-Type: text/html'
	echo ''
	echo '<!DOCTYPE html>'
	echo '<!-- Start of pcp_html_head -->'
	echo '<html lang="en">'
	echo '<head>'
	echo '  <meta charset="UTF-8">'
	if [ $DEBUG -eq 0 ]; then
		if [ x"" != x"$3" ] && [ x"" != x"$4" ]; then
			echo '  <meta http-equiv="Refresh" content="'$3'; url='$4'">'
		fi
	fi
	echo '  <title>pCP - '$1'</title>'
	echo '  <meta name="author" content="'$2'">'
	echo '  <meta name="description" content="'$1'">'
	local CSS_VER
	local JS_VER
	if [ $MODE -ge $MODE_DEVELOPER ]; then
		CSS_VER=$(date -r ../css/piCorePlayer.css +%H%M%S)
		DARK_VER=$(date -r ../css/Dark.css +%H%M%S) 
		JS_VER=$(date -r ../js/piCorePlayer.js +%H%M%S) 
	else
		CSS_VER=$(pcp_picoreplayer_version)
		DARK_VER=$CSS_VER
		JS_VER=$CSS_VER
	fi
	echo '  <link rel="stylesheet" type="text/css" href="../css/piCorePlayer'$cssExt'.css?'$CSS_VER'">'
	echo '  <link rel="stylesheet" type="text/css" href="../css/pCP_widths.css?'$CSS_VER'">'
	[ "$THEME" = "Dark" ] && echo '  <link rel="stylesheet" type="text/css" href="../css/Dark.css?'$DARK_VER'">'
	echo '  <link rel="icon" href="../images/pCP.png" type="image/x-icon" />'
	echo '  <script src="../js/piCorePlayer.js?'$JS_VER'"></script>'
	echo '</head>'
	echo ''
	[ "$5" != "nobody" ] &&
	echo '<body>'
	if [ "$PLAYERTABS" = "yes" ]; then
		echo '  <script>setplayertabs();</script>'
	fi
	echo '<!-- End of pcp_html_head -->'
}

pcp_html_end() {
	pcp_footer
	pcp_copyright
	echo '</body>'
	echo '</html>'
	exit
}

pcp_banner() {
	echo '<!-- Start of pcp_banner -->'
	echo '<table class="banner">'
	echo '  <tr>'
	echo '    <td style="height:148px">'
	echo '      <p class="banner" >'
	echo '        <img src="../images/banner.png" alt="piCorePlayer" usemap="#hotspot" />'
	echo '        <map name="hotspot">'
	echo '          <area shape="rect" coords="0,0,790,140" href="about.cgi" alt="pCP Logo">'
	echo '          <area shape="circle" coords="790,74,3" href="debug.cgi?m=100" alt="pCP Logo">'
	echo '          <area shape="circle" coords="790,100,3" href="debug.cgi?a=0" alt="pCP Logo">'
	echo '          <area shape="circle" coords="790,125,3" href="debug.cgi" alt="pCP Logo">'
	echo '        </map>'
	echo '      </p>'
	echo '    </td>'
	echo '  </tr>'
	echo '</table>'
	echo '<!-- End of pcp_banner -->'
}

pcp_navigation() {
	local NAV="nav6"

	local TAB_STYLE_MAIN="$NAV"
	local TAB_STYLE_SQUEEZELITE="$NAV"
	local TAB_STYLE_WIFI="$NAV"
	local TAB_STYLE_TWEAKS="$NAV"
	local TAB_STYLE_SECURITY="$NAV"
	local TAB_STYLE_LMS="$NAV"
	local TAB_STYLE_ABOUT="$NAV"

	case "$0" in
		main.cgi)        local TAB_STYLE_MAIN="${NAV}a" ;;
		squeezelite.cgi) local TAB_STYLE_SQUEEZELITE="${NAV}a" ;;
		wifi.cgi)        local TAB_STYLE_WIFI="${NAV}a" ;;
		tweaks.cgi)      local TAB_STYLE_TWEAKS="${NAV}a" ;;
		lms.cgi)         local TAB_STYLE_LMS="${NAV}a" ;;
		about.cgi)       local TAB_STYLE_ABOUT="${NAV}a" ;;
	esac

	echo '<!-- Start of pcp_navigation toolbar -->'
	echo '<table class="navigation">'
	echo '  <tr>'
	echo '    <td>'
	echo '      <p>'
	echo '        <a class="'$TAB_STYLE_MAIN'" href="main.cgi" title="pCP - Main Page">Main Page</a>'
	echo '        <a class="'$TAB_STYLE_SQUEEZELITE'" href="squeezelite.cgi" title="pCP - Squeezelite Settings">Squeezelite Settings</a>'
	echo '        <a class="'$TAB_STYLE_WIFI'" href="wifi.cgi" title="pCP - Wifi Settings">Wifi Settings</a>'
	echo '        <a class="'$TAB_STYLE_TWEAKS'" href="tweaks.cgi" title="pCP - Tweaks">Tweaks</a>'
	echo '        <a class="'$TAB_STYLE_LMS'" href="lms.cgi" title="pCP - LMS">LMS</a>'
	echo '        <a class="'$TAB_STYLE_ABOUT'" href="about.cgi" title="pCP - About">About</a>'
	echo '      </p>'
	echo '    </td>'
	echo '  </tr>'
	echo '</table>'
	echo '<!-- End of pcp_navigation toolbar -->'
	if [ -f $REBOOT_PENDING ] && [ "$ACTION" != "reboot" ]; then
		echo '<!-- Start of reboot notification toolbar -->'
		echo '<table class="bggrey">'
		echo '  <tr>'
		echo '    <td>'
		echo '      <div class="row">'
		echo '        <fieldset class="warning">'
		echo '          <table class="bggrey percent100">'
		echo '            <tr>'
		echo '              <td>'
		echo '                <p><b>Warning:</b> A reboot is required to complete changes.&nbsp;&nbsp;'
		echo '                  <input type="button" value="Reboot" onClick="javascript:pcp_confirm('\''Reboot '$NAME?''\'','\''main.cgi?ACTION=reboot'\'')" />'
		echo '                </p>'
		echo '              </td>'
		echo '            </tr>'
		echo '          </table>'
		echo '        </fieldset>'
		echo '      </div>'
		echo '    </td>'
		echo '  </tr>'
		echo '</table>'
		echo '<!-- End of reboot notification toolbar -->'
	fi
}

pcp_footer() {
	if [ "$1" = "static" ]; then
		echo '<!-- Start of pcp_footer -->'
		echo '<table class="bgblack">'
		echo '  <tr>'
		echo '    <td>'
		echo '      <p class="footer">
		                '$NAME' |
		                piCorePlayer v'$(pcp_picoreplayer_version)' |
						www v'$WWW_BUILD' |
		                linux '$(pcp_linux_release)' |
		                piCore v'$(pcp_picore_version)' |
		                Squeezelite v'$(pcp_squeezelite_version)'</p>'
		echo '    </td>'
		echo '  </tr>'
		echo '</table>'
		echo '<!-- End of pcp_footer -->'
	else
		if [ -f "/tmp/footer.html" ] && [ $MODE -lt $MODE_DEVELOPER ]; then
			cat /tmp/footer.html
		else
			BETAREPOACTIVE='<a class="error" href="debug.cgi?t=0">BETA REPO Active</a> |'

			[ $(pcp_squeezelite_status) -eq 0 ] && STYLE="ok" || STYLE="error"
			SQUEEZELITEfoot='<span class="'$STYLE'"> Squeezelite v'$(pcp_squeezelite_version)'</span>'

			if [ -f /etc/sysconfig/timezone ]; then
				. /etc/sysconfig/timezone
				TIMESTAMP=$(TZ=$TZ date)
			else
				TIMESTAMP="No Timezone"
			fi

			echo '<!-- Start of pcp_footer -->'
			echo '<table class="bgblack">'
			echo '  <tr>'
			echo '    <td>'
			echo '      <p class="footer">
							'$([ $TEST -eq 3 ] && echo $BETAREPOACTIVE)'
							'$NAME' |
							piCorePlayer v'$(pcp_picoreplayer_version)' |
							www v'$WWW_BUILD' |
							linux '$(pcp_linux_release)' |
							piCore v'$(pcp_picore_version)' |
							'`echo $SQUEEZELITEfoot`' |
							'`echo $TIMESTAMP`'</p>'
			echo '    </td>'
			echo '  </tr>'
			echo '</table>'
			echo '<!-- End of pcp_footer -->'
		fi
	fi
}

pcp_copyright() {
	echo '<!-- Start of pcp_copyright -->'
	echo '<table class="copyright">'
	echo '  <tr>'
	echo '    <td class="column150">'
	echo '    </td>'
	echo '    <td>'
	echo '      <p class="copyright">The Software is provided "as is" without warranty of any kind, either express or implied,'
	echo '         including without limitation any implied warranties of condition, uninterrupted use,'
	echo '         merchantability, fitness for a particular purpose, or non-infringement.</p>'
	echo '    </td>'
	echo '    <td class="column150">'
	echo '    </td>'
	echo '  </tr>'
	echo '</table>'
	echo '<!-- End of pcp_copyright -->'
}

pcp_diagnostics() {
	echo '<!-- Start of diagnostics toolbar -->'
	echo '<table class="navigation">'
	echo '  <tr>'
	echo '    <td>'
	echo '      <p>'
	echo '        <a class="nav7" href="main.cgi" title="pCP - Main Page">Main Page</a>'
	echo '        <a class="nav7" href="diagnostics.cgi" title="pCP - Diagnostics">Diagnostics</a>'
	echo '        <a class="nav7" href="diag_rpi.cgi" title="pCP - Raspberry Pi">Raspberry Pi</a>'
	echo '        <a class="nav7" href="diag_net.cgi" title="pCP - Network">Network</a>'
	echo '        <a class="nav7" href="diag_boot.cgi" title="pCP - Boot Process">Boot Process</a>'
	echo '        <a class="nav7" href="diag_snd.cgi" title="pCP - Sound">Sound</a>'
	echo '        <a class="nav7" href="diag_logs.cgi" title="pCP - Logs">Logs</a>'
	echo '      </p>'
	echo '    </td>'
	echo '  </tr>'
	echo '</table>'
	echo '<!-- End of diagnostics toolbar -->'
}

pcp_xtras() {
	echo '<!-- Start of xtras toolbar -->'
	echo '<table class="navigation">'
	echo '  <tr>'
	echo '    <td>'
	echo '      <p>'
	echo '        <a class="nav7" href="main.cgi" title="pCP - Main Page">Main Page</a>'
	echo '        <a class="nav7" href="xtras_test.cgi" title="pCP - Xtras Test">Test</a>'
	echo '        <a class="nav7" href="xtras_asoundrc.cgi" title="pCP - Xtras Asound">Asound</a>'
	echo '        <a class="nav7" href="xtras_bootcodes.cgi" title="pCP - Xtras Bootcodes">Bootcodes</a>'
	echo '        <a class="nav7" href="xtras_controls.cgi" title="pCP - Xtras Controls">Controls</a>'
	echo '        <a class="nav7" href="xtras_cpu_temp.cgi" title="pCP - Xtras CPU Temp">CPU Temp</a>'
	echo '        <a class="nav7" href="xtras_lmsclis.cgi" title="pCP - Xtras LMS CLI">LMS CLI</a>'
	echo '      </p>'
	echo '    </td>'
	echo '  </tr>'
	echo '</table>'
	echo '<!-- End of xtras toolbar -->'
}

pcp_picoreplayers_toolbar() {
	echo '<!-- Start of pcp_picoreplayers toolbar -->'
	echo '<p style="margin-top: -12px;">'
	echo '  <a id="PlayerTabsAfter" class="tab20" href="https://www.picoreplayer.org/main_about.shtml" title="Help" target="_blank">Help '$EXTERNALLINK'</a>'

	if [ $MODE -ge $MODE_PLAYER ] && [ "$PLAYERTABS" = "yes" ]; then
		if [ "$LMSERVER" = "yes" ]; then
			[ x"" = x"$(pcp_eth0_ip)" ] && LMSIP=$(pcp_wlan0_ip) || LMSIP=$(pcp_eth0_ip)
		else
			LMSIP=$(pcp_lmsip)
		fi
		[ x"" = x"$LMSWEBPORT" ] && LMSPORT=9000 || LMSPORT=$LMSWEBPORT
		echo '  <a class="tab20" href="http://'$LMSIP':'$LMSPORT'/" title="'$LMSIP'" target="_blank">LMS '$EXTERNALLINK'</a>'
	fi
	echo '</p>'
	echo '<div class="tab7end">pCP</div>'
	echo '<!-- End of pcp_picoreplayers toolbar -->'
}

pcp_mode() {
	local TAB="tab14"

	local TAB_STYLE_MODE_PLAYER="$TAB"
	local TAB_STYLE_MODE_SERVER="$TAB"
	local TAB_STYLE_MODE_BETA="$TAB"
	local TAB_STYLE_MODE_DEVELOPER="$TAB"
	local TAB_STYLE_THEME="${TAB}b"
	local TAB_STYLE_REPO="${TAB}c"

	case $MODE in
		$MODE_PLAYER)    local TAB_STYLE_MODE_PLAYER="${TAB}a" ;;
		$MODE_SERVER)    local TAB_STYLE_MODE_SERVER="${TAB}a" ;;
		$MODE_BETA)      local TAB_STYLE_MODE_BETA="${TAB}a" ;;
		$MODE_DEVELOPER) local TAB_STYLE_MODE_DEVELOPER="${TAB}a" ;;
	esac

	echo '<!-- Start of mode toolbar -->'
	echo '<p>'
	echo '  <a class="'$TAB_STYLE_MODE_PLAYER'" href="debug.cgi?m='$MODE_PLAYER'" title="Player mode">Player</a>'
	echo '  <a class="'$TAB_STYLE_MODE_SERVER'" href="debug.cgi?m='$MODE_SERVER'" title="Server mode">Player/Server</a>'
	echo '  <a class="'$TAB_STYLE_MODE_BETA'"'
	echo '     onclick="javascript:pcp_confirm('\'WARNING: Beta mode can be dangerous.\\nPress [OK] to accept risk.\',\'debug.cgi?m=''$MODE_BETA''\'')"'
	echo '     href="javascript:void(0);" title="Beta mode">Beta</a>'
	[ $MODE -ge $MODE_DEVELOPER ] &&
	echo '  <a class="'$TAB_STYLE_MODE_DEVELOPER'" href="debug.cgi?m='$MODE_DEVELOPER'" title="Developer mode">Developer</a>'
	echo '<script>setcurrenttheme('\'$THEME\'');setcurrentrepo('\'$PCP_CUR_REPO\'');</script>'
	[ "$THEME" = "Light" ] && T_THEME="Light" || T_THEME="Dark"
	[ "$THEME" = "Light" ] && NEXT_THEME="Dark" || NEXT_THEME="Light"
	[ $PCP_CUR_REPO -eq 1 ] && T_REPO="pCP Main Repo" || T_REPO="pCP Mirror Repo"
	[ $PCP_CUR_REPO -eq 1 ] && NEXT_REPO="pCP Mirror Repo" || NEXT_REPO="pCP Main Repo"
	echo '  <a id="Theme" class="'$TAB_STYLE_THEME'" title="Click to use '$NEXT_THEME' Theme" onclick="switchtheme()" >'$T_THEME' Theme</a>'
	echo '  <a id="Repo" class="'$TAB_STYLE_REPO'" title="Click to use '$NEXT_REPO'" onclick="switchrepo()" >'$T_REPO'</a>'
	echo '</p>'
	echo '<div class="tab7end">pCP</div>'
	echo '<!-- End of mode toolbar -->'
}

#========================================================================================
# Versions
#----------------------------------------------------------------------------------------
pcp_picore_version() {
	echo $(version)
}

pcp_picoreplayer_version() {
	. $PCPVERSIONCFG
	echo $PCPVERS | awk '{ print $2 }'
}

pcp_squeezelite_version() {
	${SQLT_BIN} -t | awk '/^Squeezelite/ { print $2 }' | sed s/v// | sed s/,//
}

pcp_squeezelite_build_option() {
	${SQLT_BIN} -? | grep "Build options" | grep $1 > /dev/null
	echo $?
}

pcp_linux_release() {
	uname -r
}

pcp_kernel() {
	echo $(uname -r | sed -n 's/^.*-\(.*\)_.*/\1/p')
}

pcp_audio_core() {
	case $(uname -r) in
		*AudioCore*) echo 1;;
		*) echo 0;;
	esac
}

#========================================================================================
# Tiny Core user (tc)
#----------------------------------------------------------------------------------------
pcp_tc_user() {
	cat /etc/sysconfig/tcuser
}

#========================================================================================
# Show various configuration and setup files
# $1 = title, $2 = command, $3 = height, $4 = write to log
#----------------------------------------------------------------------------------------
pcp_textarea() {
	[ "$1" = "" ] && TITLE="$2" || TITLE="$1"
	[ "$TITLE" = "none" ] || echo '<h1>[ INFO ] '$TITLE'</h1>'
	echo '<textarea style="height:'$3'px">'
	echo $START
	if [ $DEBUG -eq 1 ]; then
		echo '$1: '$1' $2: '$2' $3: '$3' $4: '$4
	fi
	eval $2
	echo $END
	echo '</textarea>'
	[ "$4" = "log" ] && pcp_write_to_log "$TITLE" "$2"
}

pcp_textarea_inform() {
	[ "$1" = "" ] && TITLE="$2" || TITLE="$1"
	[ "$TITLE" = "none" ] || echo '<h1>[ INFO ] '$TITLE'</h1>'
	echo '<textarea class="inform" style="height:'$3'px">'
	eval $2
	echo '</textarea>'
	[ "$4" = "log" ] && pcp_write_to_log "$TITLE" "$2"
}

pcp_write_to_log() {
	# TODO Check if $LOG has been set.
	[ "$1" = "" ] && TITLE="$2" || TITLE="$1"
	echo ====================================================================================== >> $LOG
	echo "$TITLE" >> $LOG
	echo -------------------------------------------------------------------------------------- >> $LOG
	eval $2 >> $LOG
	echo ====================================================================================== >> $LOG
	echo >> $LOG
}

pcp_write_to_host() {
	# This will set the hostname next time pCP is rebooted.
	pcp_clean_cmdlinetxt
	sed -i 's/host[=][^ ]* //g' $CMDLINETXT
	sed -i '1 s/^/host='${HOST}' /' $CMDLINETXT
}

# Used in reading config files. Returns value right of the =
pcp_trimval() {
	echo $1 | cut -d '=' -f2 | xargs
}

pcp_showmore() {
	echo '<script>'
	echo '  more('\'''$1''\'')'
	echo '</script>'
}

#========================================================================================
# Create table functions
#----------------------------------------------------------------------------------------
pcp_table_top() {
	pcp_start_row_shade
	echo '<table class="bggrey">'
	echo '  <tr>'
	echo '    <td>'
	echo '      <div class="row">'
	echo '        <fieldset>'
	echo '        <legend>'$1'</legend>'
	echo '          <table class="bggrey percent100">'
	echo '            <tr class="'$ROWSHADE'">'
	echo '              <td '$2'>'
}

pcp_table_textarea_top() {
	pcp_table_top "$1" "$2"
	echo '                <textarea class="inform" style="height:'$3'px">'
}

pcp_table_middle() {
	echo '              </td>'
	echo '            </tr>'
	pcp_toggle_row_shade
	echo '            <tr class="'$ROWSHADE'">'
	echo '              <td '$1'>'
}

pcp_table_end() {
	echo '              </td>'
	echo '            </tr>'
	echo '          </table>'
	echo '        </fieldset>'
	echo '      </div>'
	echo '    </td>'
	echo '  </tr>'
	echo '</table>'
}

pcp_table_textarea_end() {
	echo '                </textarea>'
	pcp_table_end
}

#========================================================================================
# Busybox httpd
#----------------------------------------------------------------------------------------
pcp_httpd_query_string_double_quote() {
	# Process the $QUERY_STRING from httpd
	eval $($HTTPD -d "$QUERY_STRING" | awk -F'&' '{ for(i=1;i<=NF;i++) { printf "%s\"\n",$i} }' | sed 's/=/="/')
	[ $DEBUG -eq 1 ] && echo '<p class="debug">[ DEBUG ] $QUERY_STRING: '$QUERY_STRING'</p>'
}

pcp_httpd_query_string_single_quote() {
	eval $($HTTPD -d "$QUERY_STRING" | awk -F'&' '{ for(i=1;i<=NF;i++) { printf "%s\047\n",$i} }' | sed "s/=/='/")
	[ $DEBUG -eq 1 ] && echo '<p class="debug">[ DEBUG ] $QUERY_STRING: '$QUERY_STRING'</p>'
}

pcp_httpd_query_string() {
	echo "$QUERY_STRING" | grep -q "%27"
	[ $? -eq 0 ] && pcp_httpd_query_string_double_quote || pcp_httpd_query_string_single_quote
}

# Needed when we want to store an encoded string in pcp.cfg
pcp_httpd_query_string_no_decode() {
	# Process the $QUERY_STRING from httpd
	eval $(echo "$QUERY_STRING" | awk -F'&' '{ for(i=1;i<=NF;i++) { printf "%s\"\n",$i} }' | sed 's/=/="/')
	[ $DEBUG -eq 1 ] && echo '<p class="debug">[ DEBUG ] $QUERY_STRING: '$QUERY_STRING'</p>'
}

# This will remove the query string from the url, prevents page reloads and document.referrer from
# reposting a command that we've already executed.
pcp_remove_query_string() {
	echo '<script>pcp_delete_query_string()</script>'
}

#========================================================================================
# Restart and Reboot popups
#----------------------------------------------------------------------------------------
pcp_reboot_required() {
	if [ ! -f $REBOOT_PENDING ]; then
		touch $REBOOT_PENDING
		echo '<script language="javascript">'
		echo '  window.addEventListener("load", function () {'
		echo '    pcp_confirm('\''Reboot '$NAME'?\n\nPress [OK] to reboot now or [Cancel] to manually reboot later.'\'','\''main.cgi?ACTION=reboot'\'')'
		echo '  })'
		echo '</script>'
	fi
}

pcp_restart_required() {
	echo '<script>'
	echo '  function restart(from_page) {'
	echo '    var url = "restartsqlt.cgi?FROM_PAGE=";'
	echo '    var page = url.concat(from_page);'
	echo '    window.location = page;'
	echo '  }'
	echo '  restart("'$1'");'
	echo '</script>'
}

pcp_confirmation_required() {
	echo '<script>'
	echo '  pcp_confirm('\'''$STRING1''\'','\'"$SCRIPT1"\'')'
	echo '</script>'
}

#========================================================================================
# Start/stop Squeezelite
#----------------------------------------------------------------------------------------
pcp_squeezelite_start() {
	# $1 - nohtml
	# $2 - display     (Used for taskset)
	if [ "$AUDIO" = "HDMI" ]; then
		sudo amixer cset numid=3 2 >/dev/null 2>&1
	fi
	if [ "$SHAIRPORT" = "yes" ]; then
		pcp_shairport_restart $1
	fi
	[ "$1" = "nohtml" ] && echo -n '[ INFO ] ' || echo '<p class="info">[ INFO ] '
	sudo /usr/local/etc/init.d/squeezelite start
	[ "$1" = "nohtml" ] || echo '</p>'
	[ "$CPUISOL" != "" ] && pcp_squeezelite_taskset $2
}

pcp_squeezelite_stop() {
	# $1 - nohtml
	[ "$1" = "nohtml" ] && echo -n '[ INFO ] ' || echo '<p class="info">[ INFO ] '
	sudo /usr/local/etc/init.d/squeezelite stop
	[ "$1" = "nohtml" ] || echo '</p>'
}

pcp_squeezelite_restart() {
	# $1 - nohtml
	if [ "$AUDIO" = "HDMI" ]; then
		sudo amixer cset numid=3 2 >/dev/null 2>&1
	fi
	[ "$1" = "nohtml" ] && echo -n '[ INFO ] ' || echo '<p class="info">[ INFO ] '
	sudo /usr/local/etc/init.d/squeezelite restart
	[ "$1" = "nohtml" ] || echo '</p>'
}

pcp_squeezelite_status() {
	sudo /usr/local/etc/init.d/squeezelite status > /dev/null 2>&1
	RESULT=$?
	if [ "$1" = "html" ]; then
		if [ $RESULT -eq 0 ]; then
			echo '<p class="ok">[ OK ] Squeezelite running.</p>'
		else
			echo '<p class="error">[ ERROR ] Squeezelite not running.</p>'
		fi
	else
		echo $RESULT
	fi
}

pcp_squeezelite_taskset() {
	local OUT=""
	[ "$1" = "display" ] || OUT='> /dev/null'
	CNT=0
	while [ $(busybox ps -T | grep squeezelite | grep -v grep | wc -l) -ne 4 -a $CNT -lt 10 ]; do
		CNT=$((CNT+1))
		sleep 0.1
	done
	# Squeezelite starts only the output thread in SCHED_FIFO Mode, use that to isolate threads.
	busybox ps -T | grep squeezelite | grep -v grep | sed 's/^[[:space:]]*//' | cut -d ' ' -f1 |
		while read PROC; do
			if [ $(chrt -p $PROC | grep policy | cut -d ':' -f2) = "SCHED_FIFO" ]; then
				#Set the Output thread to run on selected CPU
				[ "$SQLOUTAFFINITY" != "" ] && eval sudo taskset -pc $SQLOUTAFFINITY $PROC $OUT 2>&1
			else
				[ "$PRIORITY" != "" ] && P=$((PRIORITY-1)) || P=40
				#Set the Other Threads to run FIFO, Priority 45
				[ "$SQLAFFINITY" != "" ] && eval sudo taskset -pc $SQLAFFINITY $PROC $OUT 2>&1
				sudo chrt -fp $P $PROC > /dev/null 2>&1
			fi
		done
}

#========================================================================================
# Start/stop Shairport-sync
#----------------------------------------------------------------------------------------
pcp_shairport_start() {
	# $1 - nohtml
	[ "$1" = "nohtml" ] && echo -n '[ INFO ] ' || echo '<p class="info">[ INFO ] '
	sudo /usr/local/etc/init.d/shairport-sync start
	[ "$1" = "nohtml" ] || echo '</p>'
}

pcp_shairport_stop() {
	# $1 - nohtml
	[ "$1" = "nohtml" ] && echo -n '[ INFO ] ' || echo '<p class="info">[ INFO ] '
	sudo /usr/local/etc/init.d/shairport-sync stop
	[ "$1" = "nohtml" ] || echo '</p>'
}

pcp_shairport_restart() {
	# $1 - nohtml
	[ "$1" = "nohtml" ] && echo -n '[ INFO ] ' || echo '<p class="info">[ INFO ] '
	sudo /usr/local/etc/init.d/shairport-sync restart
	[ "$1" = "nohtml" ] || echo '</p>'
}

pcp_shairport_status() {
	sudo /usr/local/etc/init.d/shairport-sync status > /dev/null 2>&1
	echo $?
}

#========================================================================================
# Reload keytables for jivelite
#----------------------------------------------------------------------------------------
pcp_load_keytables() {
	KEY_EXEC="/usr/local/bin/ir-keytable"
	KEY_CONF="/usr/local/etc/keytables/jivelite"
	[ -x $KEY_EXEC -a -f $KEY_CONF ] && $KEY_EXEC -c -w $KEY_CONF
}

#========================================================================================
# Determine the system uptime in seconds or minutes
#----------------------------------------------------------------------------------------
pcp_uptime_seconds() {
	printf "%.0f\n" $(cat /proc/uptime | awk '{ print $1 }')
}

pcp_uptime_minutes() {
	printf "%.0f\n" $(cat /proc/uptime | awk '{ print $1/60 }')
}

pcp_uptime_days() {
	SECONDS=`printf "%.0f\n" $(cat /proc/uptime | awk '{ print $1 }')`
	D=$((${SECONDS} / 86400))
	H=$(((${SECONDS} % 86400) / 3600))
	M=$(((${SECONDS} % 3600) / 60))
	S=$((${SECONDS} % 60))
	[ $D -eq 1 ] && DS="day" || DS="days"
	[ $H -eq 1 ] && HS="hour" || HS="hours"
	[ $M -eq 1 ] && MS="minute" || MS="minutes"
	[ $S -eq 1 ] && SS="second" || SS="seconds"
	# 2 days 8 hours 10 minutes 35 seconds
	printf "%2d %s %2d %s %2d %s %2d %s" $D $DS $H $HS $M $MS $S $SS
}

#========================================================================================
# Determine the IP addresses
#----------------------------------------------------------------------------------------
pcp_lmsip() {
	IP=$(netstat -nt 2>&1 | grep :3483 | grep ESTABLISHED | uniq -f 4 | awk '{ print $5 }' | grep :3483 | awk -F: '{ print $1 }')
	if [ "$IP" = "127.0.0.1" ]; then
		[ x"" = x"$(pcp_eth0_ip)" ] && IP=$(pcp_wlan0_ip) || IP=$(pcp_eth0_ip)
	fi
	echo $IP
}

pcp_eth0_ip() {
	ifconfig eth0 | grep inet | awk '{ print $2 }' | awk -F: ' { print $2 }'
}

pcp_wlan0_ip() {
	ifconfig wlan0 | grep inet | awk '{ print $2 }' | awk -F: ' { print $2 }'
}

pcp_user_commands() {
	if [ x"" != x"$USER_COMMAND_1" ]; then
		USER_COMMAND_1=$(sudo $HTTPD -f -d "${USER_COMMAND_1}")
		eval "$USER_COMMAND_1" &
	fi
	if [ x"" != x"$USER_COMMAND_2" ]; then
		USER_COMMAND_2=$(sudo $HTTPD -f -d "${USER_COMMAND_2}")
		eval "$USER_COMMAND_2" &
	fi
	if [ x"" != x"$USER_COMMAND_3" ]; then
		USER_COMMAND_3=$(sudo $HTTPD -f -d "${USER_COMMAND_3}")
		eval "$USER_COMMAND_3" &
	fi

# Requires testing. <== GE
#
#	for i in 0 1 2 3 4 5 6 7 8 9
#	do
#		if [ x"" != x"$(eval echo \$USER_COMMAND_${i})" ]; then
#			eval USER_COMMAND_${i}='$(sudo ${HTTPD} -f -d "$(eval echo \$USER_COMMAND_${i})")'
#			eval "\$USER_COMMAND_${i}" &
#		fi
#	done

}

#========================================================================================
# Useful buttons
#----------------------------------------------------------------------------------------
pcp_go_main_button() {
	echo '<!-- Start of pcp_go_main_button -->'
	echo '<form name="Main" action="main.cgi" method="get" id="Main">'
	echo '<p><input class="large12" type="submit" class="large" value="Go to Main Page" />&nbsp;&nbsp;Go to Main Page</p></form>'
	echo '<!-- End of pcp_go_main_button -->'
}

pcp_go_back_button() {
	echo '<!-- Start of pcp_go_back_button -->'
	echo '<p><input type="button" value="Go Back" onclick="javascript:location.href=document.referrer;" />&nbsp;&nbsp;Go back to previous page</p>'
	echo '<!-- End of pcp_go_back_button -->'
}

pcp_refresh_button() {
	echo '<!-- Start of pcp_refresh_button -->'
	echo '<p><input type="button" value="Refresh" onClick="window.location.reload()" />&nbsp;&nbsp;Refresh this page</p>'
	echo '<!-- End of pcp_refresh_button -->'
}

pcp_reboot_button() {
	echo '<!-- Start of pcp_reboot_button -->'
	echo '<p><input type="button" value="Reboot" onClick="javascript:pcp_confirm('\''Reboot '$NAME?''\'','\''main.cgi?ACTION=reboot'\'')" />&nbsp;&nbsp;Reboot '$NAME'</p>'
	echo '<!-- End of pcp_reboot_button -->'
}

pcp_redirect_button() {
	# $1 - button text
	# $2 - redirection URL
	# $3 - redirection delay
	echo '<!-- Start of pcp_redirect_button -->'
	echo '<form name="redirect button" action="'$2'" method="get">'
	echo '  <p>'
	echo '    <input class="large12" type="submit" value="'$1'">&nbsp;&nbsp;<span id="countdown"></span>'
	echo '  </p>'
	echo '</form>'
	echo '<script>pcp_redirect("'$3'","'$2'")</script>'
	echo '<!-- End of pcp_redirect_button -->'
}

#========================================================================================
# Backup files in /opt/.filetool.lst to mydata.tgz
#  - $1 can be set to "nohtml"
#  - function can generate text or html output.
#----------------------------------------------------------------------------------------
pcp_backup() {
	local FORMAT=$1
	local WARNSIZE=350000
	[ "$FORMAT" = "" ] && local FORMAT="html"

	# Delete any previous backup_done file
	[ -e /tmp/backup_done ] && sudo rm -f /tmp/backup_done

	# Do a backup - filetool.sh backs up files in .filetool.lst
	pcp_message INFO "" $FORMAT "-n"
	sudo filetool.sh -b
	sync > /dev/null 2>&1

	# If backup_status file exists and is non-zero in size, then an error has occurred
	if [ -s /tmp/backup_status ]; then
		pcp_message ERROR "Show backup_status..." $FORMAT
		cat /tmp/backup_status
	fi

	# If backup_done exists, then the backup was successful
	if [ -f /tmp/backup_done ]; then
		pcp_message OK "Backup successful." $FORMAT
	else
		pcp_message ERROR "Backup failed." $FORMAT
	fi

	# Encourage users to keep files backed up to mydata.tgz small
	if [ $(pcp_check_mydata) -gt $WARNSIZE ]; then
		pcp_message WARN "Your backup is a little large - $(pcp_check_mydata) bytes." $FORMAT
		pcp_message INFO "Be careful adding large files to /home/tc." $FORMAT
		pcp_message INFO "If your backup takes a long time, piCorePlayer may fail to start properly." $FORMAT
	fi
}

pcp_check_mydata() {
	SIZE=$(ls -l /etc/sysconfig/tcedir/mydata.tgz | awk '{print $5}')
	echo $SIZE
}

pcp_create_rotdash() {
	sudo cat <<EOF > /usr/local/sbin/rotdash
#!/bin/sh
# Generated by piCorePlayer

while [ -e /proc/\$1 ]
do
	echo  -n "."
	sleep 0.25
done
EOF

	sudo chmod u+x,g+x,o+x /usr/local/sbin/rotdash
}

#========================================================================================
# Display which script is running
#----------------------------------------------------------------------------------------
pcp_running_script() {
	[ $DEBUG -eq 1 ] && echo '<p class="debug">[ DEBUG ] Running '$0'...</p>'
}

#========================================================================================
# Mounting/unmounting devices
#----------------------------------------------------------------------------------------
pcp_mount_bootpart() {
	# Check if mmcblk0p1 is mounted otherwise mount it
	if mount | grep $VOLUME; then
		echo '<p class="error">[ WARN ] '$VOLUME' already mounted.</p>'
	else
		echo '<p class="info">[ INFO ] Mounting '$VOLUME'...</p>'
		echo '<p style="font-size:10px">'
		sudo mount $DEVICE;
	fi
}

pcp_umount_bootpart() {
	# Unmount mmcblk0p1
	sync
	sync
	echo '<p class="info">[ INFO ] Unmounting '$VOLUME'...</p>'
	sudo umount $DEVICE
}

pcp_mount_bootpart_nohtml() {
	# Check if mmcblk0p1 is mounted otherwise mount it
	if mount | grep >/dev/null $VOLUME; then
		echo '[ WARN ] '$VOLUME' already mounted.'
	else
		echo '[ INFO ] Mounting '$VOLUME'...'
		sudo mount $DEVICE;
	fi
}

pcp_umount_bootpart_nohtml() {
	# Unmount mmcblk0p1
	sync
	sync
	echo '[ INFO ] Unmounting '$VOLUME'...'
	sudo umount $DEVICE
}

# CHECK:  This is defined above in pcp-variables
#	VOLUME=/mnt/mmcblk0p1
#	DEVICE=/dev/mmcblk0p1

pcp_mount_device() {
	# Check if device is mounted otherwise mount it
	if mount | grep "/mnt/$1"; then
		echo '<p class="error">[ WARN ] /mnt/'$1' already mounted.</p>'
	else
		echo '<p class="info">[ INFO ] Mounting /dev/'$1'...</p>'
		echo '<p style="font-size:10px">'
		sudo mount /dev/$1;
	fi
}

pcp_umount_device() {
	# Unmount device
	sync
	sync
	echo '<p class="info">[ INFO ] Unmounting /dev/'$1'...</p>'
	sudo umount /dev/$1
}

#========================================================================================
# Reboot/shutdown piCorePlayer
# If reboot is issued with wifi and net mounted drive, the reboot will hang.
#----------------------------------------------------------------------------------------
pcp_reboot() {
	echo '<p class="info">[ INFO ] piCorePlayer is rebooting...</p>'
	if [ "$NETMOUNT1" = "yes" ]; then
		echo '<p class="info">[ INFO ] Unmounting Network Shared Drive...</p>'
		mount | grep -q cifs
		[ $? -eq 0 ] && umount /mnt/$NETMOUNT1POINT
	fi
	sudo reboot
}

pcp_shutdown() {
	echo '<p class="info">[ INFO ] piCorePlayer is shutting down...</p>'
	exitcheck.sh
}

#========================================================================================
# Save parameters to the config file - add double quotes
#
# Note: Please maintain both pcp_save_to_config AND pcp_reset_config_to_defaults.
#----------------------------------------------------------------------------------------
pcp_write_var_to_config() {
	sed -i 's|\(^'$1'=\).*|\1"'$2'"|' $PCPCFG
}

pcp_save_to_config() {
	sudo sed -i "s/\(WIFI=\).*/\1\"$WIFI\"/" $PCPCFG
	sudo sed -i "s/\(DEBUG=\).*/\1\"$DEBUG\"/" $PCPCFG
	sudo sed -i "s/\(MODE=\).*/\1\"$MODE\"/" $PCPCFG
	sudo sed -i "s/\(TEST=\).*/\1\"$TEST\"/" $PCPCFG
	sudo sed -i "s/\(PCP_CUR_REPO=\).*/\1\"$PCP_CUR_REPO\"/" $PCPCFG
	sudo sed -i "s/\(THEME=\).*/\1\"$THEME\"/" $PCPCFG
	sudo sed -i "s/\(NAME=\).*/\1\"$NAME\"/" $PCPCFG
	sudo sed -i "s/\(OUTPUT=\).*/\1\"$OUTPUT\"/" $PCPCFG
	sudo sed -i "s/\(ALSA_PARAMS=\).*/\1\"$ALSA_PARAMS\"/" $PCPCFG
	sudo sed -i "s/\(BUFFER_SIZE=\).*/\1\"$BUFFER_SIZE\"/" $PCPCFG
	sudo sed -i "s/\(_CODEC=\).*/\1\"$_CODEC\"/" $PCPCFG
	sudo sed -i "s/\(XCODEC=\).*/\1\"$XCODEC\"/" $PCPCFG
	sudo sed -i "s/\(PRIORITY=\).*/\1\"$PRIORITY\"/" $PCPCFG
	sudo sed -i "s/\(MAX_RATE=\).*/\1\"$MAX_RATE\"/" $PCPCFG
	sudo sed -i "s/\(UPSAMPLE=\).*/\1\"$UPSAMPLE\"/" $PCPCFG
	sudo sed -i "s/\(MAC_ADDRESS=\).*/\1\"$MAC_ADDRESS\"/" $PCPCFG
	sudo sed -i "s/\(SERVER_IP=\).*/\1\"$SERVER_IP\"/" $PCPCFG
	sudo sed -i "s/\(LOGLEVEL=\).*/\1\"$LOGLEVEL\"/" $PCPCFG
	sudo sed -i "s/\(LOGFILE=\).*/\1\"$LOGFILE\"/" $PCPCFG
	sudo sed -i "s/\(DSDOUT=\).*/\1\"$DSDOUT\"/" $PCPCFG
	sudo sed -i "s/\(VISUALISER=\).*/\1\"$VISUALISER\"/" $PCPCFG
	sudo sed -i "s/\(CLOSEOUT=\).*/\1\"$CLOSEOUT\"/" $PCPCFG
	sudo sed -i "s/\(UNMUTE=\).*/\1\"$UNMUTE\"/" $PCPCFG
	sudo sed -i "s/\(ALSAVOLUME=\).*/\1\"$ALSAVOLUME\"/" $PCPCFG
	sudo sed -i "s@\(OTHER=\).*@\1\"$OTHER\"@" $PCPCFG
	sudo sed -i "s/\(AUDIO=\).*/\1\"$AUDIO\"/" $PCPCFG
	sudo sed -i "s@\(AUDIOBOOTSCRIPT=\).*@\1\"$AUDIOBOOTSCRIPT\"@" $PCPCFG
	sudo sed -i "s/\(HOST=\).*/\1\"$HOST\"/" $PCPCFG
	sudo sed -i "s/\(CPUGOVERNOR=\).*/\1\"$CPUGOVERNOR\"/" $PCPCFG
	sudo sed -i "s/\(OVERCLOCK=\).*/\1\"$OVERCLOCK\"/" $PCPCFG
	sudo sed -i "s/\(ADVOVERCLOCK=\).*/\1\"$ADVOVERCLOCK\"/" $PCPCFG
	sudo sed -i "s/\(CPUISOL=\).*/\1\"$CPUISOL\"/" $PCPCFG
	sudo sed -i "s/\(SQLAFFINITY=\).*/\1\"$SQLAFFINITY\"/" $PCPCFG
	sudo sed -i "s/\(SQLOUTAFFINITY=\).*/\1\"$SQLOUTAFFINITY\"/" $PCPCFG
	sudo sed -i "s/\(CMD=\).*/\1\"$CMD\"/" $PCPCFG
	sudo sed -i "s/\(FIQ=\).*/\1\"$FIQ\"/" $PCPCFG
	sudo sed -i "s/\(ALSAlevelout=\).*/\1\"$ALSAlevelout\"/" $PCPCFG
	sudo sed -i "s/\(ALSAeq=\).*/\1\"$ALSAeq\"/" $PCPCFG
	sudo sed -i "s/\(EQUAL_OUT_DEVICE=\).*/\1\"$EQUAL_OUT_DEVICE\"/" $PCPCFG
	sudo sed -i "s/\(STREAMER=\).*/\1\"$STREAMER\"/" $PCPCFG
	sudo sed -i "s/\(STREAMER_IN_DEVICE=\).*/\1\"$STREAMER_IN_DEVICE\"/" $PCPCFG
	sudo sed -i "s@\(TIMEZONE=\).*@\1\"$TIMEZONE\"@" $PCPCFG
	sudo sed -i "s/\(REBOOT=\).*/\1\"$REBOOT\"/" $PCPCFG
	sudo sed -i "s/\(RB_H=\).*/\1\"$RB_H\"/" $PCPCFG
	sudo sed -i "s/\(RB_WD=\).*/\1\"$RB_WD\"/" $PCPCFG
	sudo sed -i "s/\(RB_DMONTH=\).*/\1\"$RB_DMONTH\"/" $PCPCFG
	sudo sed -i "s/\(RESTART=\).*/\1\"$RESTART\"/" $PCPCFG
	sudo sed -i "s/\(RS_H=\).*/\1\"$RS_H\"/" $PCPCFG
	sudo sed -i "s/\(RS_WD=\).*/\1\"$RS_WD\"/" $PCPCFG
	sudo sed -i "s/\(RS_DMONTH=\).*/\1\"$RS_DMONTH\"/" $PCPCFG
	sudo sed -i "s@\(CRON_COMMAND=\).*@\1\"$CRON_COMMAND\"@" $PCPCFG
	sudo sed -i "s/\(AUTOSTARTLMS=\).*/\1\"$AUTOSTARTLMS\"/" $PCPCFG
	sudo sed -i "s/\(A_S_LMS=\).*/\1\"$A_S_LMS\"/" $PCPCFG
	sudo sed -i "s/\(AUTOSTARTFAV=\).*/\1\"$AUTOSTARTFAV\"/" $PCPCFG
	sudo sed -i "s/\(A_S_FAV=\).*/\1\"$A_S_FAV\"/" $PCPCFG
	sudo sed -i "s@\(USER_COMMAND_1=\).*@\1\"$USER_COMMAND_1\"@" $PCPCFG
	sudo sed -i "s@\(USER_COMMAND_2=\).*@\1\"$USER_COMMAND_2\"@" $PCPCFG
	sudo sed -i "s@\(USER_COMMAND_3=\).*@\1\"$USER_COMMAND_3\"@" $PCPCFG
	sudo sed -i "s/\(JIVELITE=\).*/\1\"$JIVELITE\"/" $PCPCFG
	sudo sed -i "s/\(SCREENROTATE=\).*/\1\"$SCREENROTATE\"/" $PCPCFG
	sudo sed -i "s/\(JL_SCREEN_WIDTH=\).*/\1\"$JL_SCREEN_WIDTH\"/" $PCPCFG
	sudo sed -i "s/\(JL_SCREEN_HEIGHT=\).*/\1\"$JL_SCREEN_HEIGHT\"/" $PCPCFG
	sudo sed -i "s@\(JL_FRAME_BUFFER=\).*@\1\"$JL_FRAME_BUFFER\"@" $PCPCFG
	sudo sed -i "s/\(JL_FRAME_RATE=\).*/\1\"$JL_FRAME_RATE\"/" $PCPCFG
	sudo sed -i "s/\(JL_FRAME_DEPTH=\).*/\1\"$JL_FRAME_DEPTH\"/" $PCPCFG
	sudo sed -i "s/\(SHAIRPORT=\).*/\1\"$SHAIRPORT\"/" $PCPCFG
	sudo sed -i "s/\(LMSERVER=\).*/\1\"$LMSERVER\"/" $PCPCFG
	sudo sed -i "s@\(LMSDATA=\).*@\1\"$LMSDATA\"@" $PCPCFG
	sudo sed -i "s/\(SQLT_VERSION=\).*/\1\"$SQLT_VERSION\"/" $PCPCFG
	sudo sed -i "s/\(SQBINARY=\).*/\1\"$SQBINARY\"/" $PCPCFG
	sudo sed -i "s/\(SQUEEZELITE=\).*/\1\"$SQUEEZELITE\"/" $PCPCFG
	sudo sed -i "s/\(GPIOPOWEROFF=\).*/\1\"$GPIOPOWEROFF\"/" $PCPCFG
	sudo sed -i "s/\(GPIOPOWEROFF_GPIO=\).*/\1\"$GPIOPOWEROFF_GPIO\"/" $PCPCFG
	sudo sed -i "s/\(GPIOPOWEROFF_HI=\).*/\1\"$GPIOPOWEROFF_HI\"/" $PCPCFG
	sudo sed -i "s/\(GPIOSHUTDOWN=\).*/\1\"$GPIOSHUTDOWN\"/" $PCPCFG
	sudo sed -i "s/\(GPIOSHUTDOWN_GPIO=\).*/\1\"$GPIOSHUTDOWN_GPIO\"/" $PCPCFG
	sudo sed -i "s/\(GPIOSHUTDOWN_HI=\).*/\1\"$GPIOSHUTDOWN_HI\"/" $PCPCFG
	sudo sed -i "s/\(GPIOSHUTDOWN_PU=\).*/\1\"$GPIOSHUTDOWN_PU\"/" $PCPCFG
	sudo sed -i "s/\(POWER_GPIO=\).*/\1\"$POWER_GPIO\"/" $PCPCFG
	sudo sed -i "s/\(POWER_OUTPUT=\).*/\1\"$POWER_OUTPUT\"/" $PCPCFG
	sudo sed -i "s@\(POWER_SCRIPT=\).*@\1\"$POWER_SCRIPT\"@" $PCPCFG
	sudo sed -i "s/\(IR_LIRC=\).*/\1\"$IR_LIRC\"/" $PCPCFG
	sudo sed -i "s/\(IR_KEYTABLES=\).*/\1\"$IR_KEYTABLES\"/" $PCPCFG
	sudo sed -i "s/\(IR_GPIO_IN=\).*/\1\"$IR_GPIO_IN\"/" $PCPCFG
	sudo sed -i "s/\(IR_GPIO_OUT=\).*/\1\"$IR_GPIO_OUT\"/" $PCPCFG
	sudo sed -i "s/\(IR_DEVICE=\).*/\1\"$IR_DEVICE\"/" $PCPCFG
	sudo sed -i "s@\(IR_CONFIG=\).*@\1\"$IR_CONFIG\"@" $PCPCFG
	sudo sed -i "s/\(LMSWEBPORT=\).*/\1\"$LMSWEBPORT\"/" $PCPCFG
	sudo sed -i "s/\(FSM=\).*/\1\"$FSM\"/" $PCPCFG
	sudo sed -i "s/\(LMSCONTROLS=\).*/\1\"$LMSCONTROLS\"/" $PCPCFG
	sudo sed -i "s/\(PLAYERTABS=\).*/\1\"$PLAYERTABS\"/" $PCPCFG
	sudo sed -i "s/\(HDMIPOWER=\).*/\1\"$HDMIPOWER\"/" $PCPCFG
	sudo sed -i "s/\(HIGHHZ=\).*/\1\"$HIGHHZ\"/" $PCPCFG
	sudo sed -i "s/\(APMODE=\).*/\1\"$APMODE\"/" $PCPCFG
	sudo sed -i "s/\(AP_IP=\).*/\1\"$AP_IP\"/" $PCPCFG
	sudo sed -i "s/\(RPI3INTWIFI=\).*/\1\"$RPI3INTWIFI\"/" $PCPCFG
	sudo sed -i "s/\(RPIBLUETOOTH=\).*/\1\"$RPIBLUETOOTH\"/" $PCPCFG
	sudo sed -i "s/\(SAMBA=\).*/\1\"$SAMBA\"/" $PCPCFG
	sudo sed -i "s/\(WOL=\).*/\1\"$WOL\"/" $PCPCFG
	sudo sed -i "s/\(WOL_NIC=\).*/\1\"$WOL_NIC\"/" $PCPCFG
	sudo sed -i "s/\(WOL_LMSMACADDRESS=\).*/\1\"$WOL_LMSMACADDRESS\"/" $PCPCFG
	sudo sed -i "s/\(SPARAMS1=\).*/\1\"$PARAM1\"/" $PCPCFG
	sudo sed -i "s/\(SPARAMS2=\).*/\1\"$PARAM2\"/" $PCPCFG
	sudo sed -i "s/\(SPARAMS3=\).*/\1\"$PARAM3\"/" $PCPCFG
	sudo sed -i "s/\(SPARAMS4=\).*/\1\"$PARAM4\"/" $PCPCFG
	sudo sed -i "s/\(SPARAMS5=\).*/\1\"$PARAM5\"/" $PCPCFG
	sudo sed -i "s/\(INTERNET_CHECK_IP=\).*/\1\"$INTERNET_CHECK_IP\"/" $PCPCFG
	sudo sed -i "s/\(ROTDASH=\).*/\1\"$ROTDASH\"/" $PCPCFG
	sudo sed -i "s/\(SHAIRPORT_OUT=\).*/\1\"$SHAIRPORT_OUT\"/" $PCPCFG
	sudo sed -i "s/\(SHAIRPORT_CONTROL=\).*/\1\"$SHAIRPORT_CONTROL\"/" $PCPCFG
	sudo sed -i "s/\(NETWORK_WAIT=\).*/\1\"$NETWORK_WAIT\"/" $PCPCFG
	sudo sed -i "s/\(GUI_DISABLE=\).*/\1\"$GUI_DISABLE\"/" $PCPCFG
	sudo sed -i "s/\(WWW_PORT=\).*/\1\"$WWW_PORT\"/" $PCPCFG
}

#========================================================================================
# Create a new pcp.cfg with defaults values.
#
# This function will add new variables if missing in current pcp.cfg. The new variables
# will have the default values loaded.
#
# Note: Please maintain both pcp_save_to_config AND pcp_reset_config_to_defaults.
#----------------------------------------------------------------------------------------
pcp_update_config_to_defaults() {
	sudo cat <<EOF > $PCPCFG
WIFI="off"
DEBUG="0"
MODE="10"
TEST="0"
PCP_CUR_REPO="1"
THEME="Light"
NAME="piCorePlayer"
OUTPUT="hw:CARD=ALSA"
ALSA_PARAMS="80:::1"
BUFFER_SIZE=""
_CODEC=""
XCODEC=""
PRIORITY=""
MAX_RATE=""
UPSAMPLE=""
MAC_ADDRESS=""
SERVER_IP=""
LOGLEVEL=""
LOGFILE=""
DSDOUT=""
VISUALISER=""
CLOSEOUT=""
UNMUTE=""
ALSAVOLUME=""
OTHER=""
AUDIO="Analog"
AUDIOBOOTSCRIPT=""
HOST="piCorePlayer"
TIMEZONE=""
CPUGOVERNOR="ondemand"
OVERCLOCK="NONE"
ADVOVERCLOCK="None"
CPUISOL=""
SQLAFFINITY=""
SQLOUTAFFINITY=""
CMD="Default"
FIQ="0xF"
ALSAlevelout="Default"
ALSAeq="no"
EQUAL_OUT_DEVICE=""
STREAMER="no"
STREAMER_IN_DEVICE=""
REBOOT="Disabled"
RB_H="0"
RB_WD="*"
RB_DMONTH="*"
RESTART="Disabled"
RS_H="0"
RS_WD="*"
RS_DMONTH="*"
CRON_COMMAND=""
AUTOSTARTLMS=""
A_S_LMS="Disabled"
AUTOSTARTFAV=""
A_S_FAV="Disabled"
USER_COMMAND_1=""
USER_COMMAND_2=""
USER_COMMAND_3=""
JIVELITE="no"
SCREENROTATE="180"
JL_SCREEN_WIDTH="0"
JL_SCREEN_HEIGHT="0"
JL_FRAME_BUFFER="/dev/fb0"
JL_FRAME_RATE=""
JL_FRAME_DEPTH=""
SHAIRPORT="no"
LMSERVER="no"
LMSDATA="default"
SQLT_VERSION="basic"
SQBINARY="default"
SQUEEZELITE="yes"
GPIOPOWEROFF="no"
GPIOPOWEROFF_GPIO="17"
GPIOPOWEROFF_HI="yes"
GPIOSHUTDOWN="no"
GPIOSHUTDOWN_GPIO="22"
GPIOSHUTDOWN_HI="yes"
GPIOSHUTDOWN_PU="down"
POWER_GPIO=""
POWER_OUTPUT="L"
POWER_SCRIPT=""
IR_LIRC="no"
IR_KEYTABLES="no"
IR_GPIO_IN="25"
IR_GPIO_OUT=""
IR_DEVICE="lirc0"
IR_CONFIG=""
LMSWEBPORT=""
FSM="Default"
LMSCONTROLS="yes"
PLAYERTABS="yes"
HDMIPOWER="on"
HIGHHZ="off"
APMODE="no"
AP_IP=""
RPI3INTWIFI="on"
RPIBLUETOOTH="off"
SAMBA="disabled"
WOL="no"
WOL_NIC=""
WOL_LMSMACADDRESS=""
SPARAMS1=""
SPARAMS2=""
SPARAMS3=""
SPARAMS4=""
SPARAMS5=""
INTERNET_CHECK_IP=""
ROTDASH="no"
SHAIRPORT_OUT="Please change"
SHAIRPORT_CONTROL="Please change"
NETWORK_WAIT="50"
GUI_DISABLE="0"
WWW_PORT="80"
EOF
}

#========================================================================================
# This is a developer function only, do not use in normal scripts.
# Note: This must be obsolete? <==== GE
#----------------------------------------------------------------------------------------
pcp_reset_config_to_defaults() {
	pcp_update_config_to_defaults

	# Remove timezone stuff
	pcp_mount_bootpart_nohtml
	sudo sed -i 's/\(tz=\)\S*[ ]\+//g' $CMDLINETXT
	pcp_umount_bootpart_nohtml
	sudo rm -f /etc/sysconfig/timezone

	# Remove Jivelite stuff
	sudo rm -f $TCEMNT/tce/optional/pcp-jivelite.tcz
	sudo rm -f $TCEMNT/tce/optional/pcp-jivelite.tcz.md5.txt
	sudo rm -rf /home/tc/.jivelite
	sudo rm -rf /opt/jivelite
	sudo sed -i '/jivelite.tcz/d' $ONBOOTLST
	sudo sed -i '/^opt\/jivelite/d' /opt/.xfiletool.lst

	# Remove VU_Meter stuff
	sudo rm -f $TCEMNT/tce/optional/VU_Meter*.tcz
	sudo rm -f $TCEMNT/tce/optional/VU_Meter*.tcz.md5.txt

	# Remove wifi stuff
	sudo sed -i '/firmware-atheros.tcz/d' $ONBOOTLST
	sudo sed -i '/firmware-brcmwifi.tcz/d' $ONBOOTLST
	sudo sed -i '/firmware-rpi-wifi.tcz/d' $ONBOOTLST
	sudo sed -i '/firmware-ralinkwifi.tcz/d' $ONBOOTLST
	sudo sed -i '/firmware-rtlwifi.tcz/d' $ONBOOTLST
	sudo sed -i '/wireless/d' $ONBOOTLST
#	sudo sed -i '/wifi.tcz/d' $ONBOOTLST

	# Remove cron stuff
	( crontab -l | grep -v "reboot" ) | crontab -
	( crontab -l | grep -v "restart" ) | crontab -
	( crontab -l | grep -v "Custom" ) | crontab -

	# Reset hostname to pCP default
	sudo sed -i "s/host[=][^ ]* /host=piCorePlayer /g" $CMDLINETXT

	# Make sure that onboard analog soundcard is enabled and i2s DAC overlays are removed
	pcp_disable_i2s
}
